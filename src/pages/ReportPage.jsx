import { useEffect, useState } from "react";
import { supabase } from "../supabaseClient";
import "./ReportPage.css";

export default function ReportPage() {
  const [transactions, setTransactions] = useState([]);
  const [selectedImage, setSelectedImage] = useState(null);
  const userName = localStorage.getItem("username");
  const role = localStorage.getItem("role"); // ‚úÖ ‡πÄ‡∏≠‡∏≤ role ‡∏°‡∏≤‡πÄ‡∏ä‡πá‡∏Ñ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå

  useEffect(() => {
    fetchTransactions();
  },[]);

  async function fetchTransactions() {
    let query = supabase
      .from("transactions")
      .select("*")
      .order("date", { ascending: false });

    // ‚úÖ ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô user (viewer) ‚Üí ‡πÄ‡∏´‡πá‡∏ô‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏Ç‡∏≠‡∏á‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á
    if (role === "user") {
      query = query.eq("created_by", userName);
    }

    const { data, error } = await query;

    if (error) console.error("‚ùå Fetch error:", error.message);
    else setTransactions(data);
  }

  async function handleDelete(id, fileUrl) {
    if (!window.confirm("‚ö†Ô∏è ‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ô‡∏µ‡πâ‡πÉ‡∏ä‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?")) return;

    // ‚úÖ ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡πÑ‡∏ü‡∏•‡πå‡πÅ‡∏ô‡∏ö ‚Üí ‡∏•‡∏ö‡πÉ‡∏ô storage ‡∏Å‡πà‡∏≠‡∏ô
    if (fileUrl) {
      const storagePath = extractStoragePath(fileUrl);
      if (storagePath) {
        const { error: storageError } = await supabase.storage
          .from("uploads")
          .remove([storagePath]);

        if (storageError)
          console.warn("‚ö†Ô∏è ‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à:", storageError.message);
      }
    }

    // ‚úÖ ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å table
    const { error } = await supabase.from("transactions").delete().eq("id", id);

    if (error) {
      alert("‚ùå ‡∏•‡∏ö‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: " + error.message);
    } else {
      alert("‚úÖ ‡∏•‡∏ö‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!");
      fetchTransactions(); // ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡∏°‡πà
    }
  }

  // ‚úÖ helper ‡πÅ‡∏¢‡∏Å path ‡∏à‡∏≤‡∏Å URL
  function extractStoragePath(fileUrl) {
    const parts = fileUrl.split("/uploads/");
    return parts[1] ? parts[1] : null;
  }

  async function approveRequest(id) {
    const { error } = await supabase
      .from("transactions")
      .update({ status: "approved" })
      .eq("id", id);

    if (error) alert("‚ùå ‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à");
    else {
      alert("‚úÖ ‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!");
      fetchTransactions(); // refresh list
    }
  }

  return (
    <div className="report-root">
      <h2>üìä ‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô</h2>

      {transactions.length === 0 ? (
        <p>‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•</p>
      ) : (
        <ul className="report-list">
          {transactions.map((item) => (
            <li
              key={item.id}
              className={`report-card ${
                item.category === "‡∏£‡∏≤‡∏¢‡∏£‡∏±‡∏ö" ? "income" : "expense"
              }`}
            >
              {/* ‚úÖ ‡∏™‡πà‡∏ß‡∏ô‡∏´‡∏±‡∏ß‡∏Å‡∏≤‡∏£‡πå‡∏î */}
              <div className="card-header">
                <p>
                  üìÖ <b>{item.date}</b>
                </p>
                {(role === "admin" || role === "superadmin") &&
                  item.status === "pending" && (
                    <button
                      className="btn-approve"
                      onClick={() => approveRequest(item.id)}
                    >
                      ‚úÖ ‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥
                    </button>
                  )}
              </div>

              <p>üìÇ {item.category}</p>
              <p>üìù {item.description}</p>
              <p
                className={
                  item.category === "‡∏£‡∏≤‡∏¢‡∏£‡∏±‡∏ö"
                    ? "amount-income"
                    : "amount-expense"
                }
              >
                üíµ {item.amount.toLocaleString()} ‡∏ö‡∏≤‡∏ó
              </p>

              <p>
                ‚úÖ ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞:{" "}
                {item.status === "approved" ? "‚úîÔ∏è ‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡πÅ‡∏•‡πâ‡∏ß" : "‚è≥ ‡∏£‡∏≠‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥"}
              </p>

              {/* ‚úÖ ‡∏õ‡∏∏‡πà‡∏° View ‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û ‡∏≠‡∏¢‡∏π‡πà‡∏î‡πâ‡∏≤‡∏ô‡∏ö‡∏ô (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡πÑ‡∏ü‡∏•‡πå) */}
              {item.file_url && (
                <button
                  className="btn-view"
                  onClick={() => setSelectedImage(item.file_url)}
                >
                  üëÅÔ∏è View ‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û
                </button>
              )}

              {/* ‚úÖ ‡∏õ‡∏∏‡πà‡∏°‡∏•‡∏ö ‡∏•‡∏≠‡∏¢‡∏•‡πà‡∏≤‡∏á‡∏Ç‡∏ß‡∏≤ ‡πÄ‡∏â‡∏û‡∏≤‡∏∞ superadmin */}
              {role === "superadmin" && (
                <div className="card-delete-footer">
                  <button
                    className="btn-delete"
                    onClick={() => handleDelete(item.id, item.file_url)}
                  >
                    üóëÔ∏è ‡∏•‡∏ö
                  </button>
                </div>
              )}
            </li>
          ))}
        </ul>
      )}

      {/* ‚úÖ Popup ‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û */}
      {selectedImage && (
        <div className="popup-overlay" onClick={() => setSelectedImage(null)}>
          <div className="popup-content">
            <img src={selectedImage} alt="‡πÅ‡∏ô‡∏ö‡πÑ‡∏ü‡∏•‡πå" />
            <button
              className="btn-close"
              onClick={() => setSelectedImage(null)}
            >
              ‚ùå ‡∏õ‡∏¥‡∏î
            </button>
          </div>
        </div>
      )}
    </div>
  );
}
