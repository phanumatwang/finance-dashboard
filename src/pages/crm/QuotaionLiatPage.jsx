import { useEffect, useRef, useState } from "react";
import { supabase } from "../../supabase/supabaseClient";
import { format } from "date-fns";
import { generateQuotationPDF } from "../../generateQuotationPDF";

// ‚úÖ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÄ‡∏•‡∏Ç Revision
function nextRevisionNumber(no = "") {
  // ‡∏ï‡∏±‡∏î‡∏ä‡πà‡∏≠‡∏á‡∏ß‡πà‡∏≤‡∏á‡πÅ‡∏•‡∏∞‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤‡∏°‡∏µ -R ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß‡πÑ‡∏´‡∏°
  const m = /^(.*?)(?:-R(\d+))?$/.exec(no.trim());
  const base = (m && m[1]) || no.trim();
  const next = m && m[2] ? parseInt(m[2], 10) + 1 : 1;
  return `${base}-R${next}`;
}

export default function ListQuotationPage() {
  const [quotations, setQuotations] = useState([]);
  const [selectedPdfUrl, setSelectedPdfUrl] = useState("");
  const [selectedFileName, setSelectedFileName] = useState("");
  const dialogRef = useRef();

  const fetchQuotations = async () => {
    const { data, error } = await supabase
      .from("quotations")
      .select("*, customers(name, address, tel)")
      .order("created_at", { ascending: false });
    if (!error) setQuotations(data || []);
  };

  useEffect(() => {
    fetchQuotations();
  }, []);

  const handleDownloadPDF = async (quotation) => {
    const customer = quotation.customers || {};
    const { url } = await generateQuotationPDF(quotation, customer, "/logo.jpg");

    setSelectedPdfUrl(url);
    setSelectedFileName(`‡πÉ‡∏ö‡πÄ‡∏™‡∏ô‡∏≠‡∏£‡∏≤‡∏Ñ‡∏≤-${customer.name}.pdf`);
    dialogRef.current?.showModal();
  };

  // ‚úÖ ‡∏Å‡∏î‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç -> ‡πÄ‡∏û‡∏¥‡πà‡∏° R ‡πÅ‡∏•‡∏∞‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
  const handleEdit = async (q) => {
    const newNo = nextRevisionNumber(q.number || "");
    const ok = confirm(`‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÉ‡∏ö‡πÄ‡∏™‡∏ô‡∏≠‡∏£‡∏≤‡∏Ñ‡∏≤?\n‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏∞‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô: ${newNo}`);
    if (!ok) return;

    const { error } = await supabase
      .from("quotations")
      .update({
        number: newNo,
        status: "revised",                 // ‡πÉ‡∏™‡πà‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÉ‡∏´‡∏°‡πà‡πÄ‡∏ú‡∏∑‡πà‡∏≠‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏ï‡πà‡∏≠
        updated_at: new Date().toISOString()
      })
      .eq("id", q.id);

    if (error) {
      alert("‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: " + error.message);
      return;
    }

    alert("‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢");
    fetchQuotations();
    // ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏´‡∏ô‡πâ‡∏≤‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏à‡∏£‡∏¥‡∏á ‡πÜ ‡πÉ‡∏´‡πâ‡∏û‡∏≤‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤‡∏ô‡∏±‡πâ‡∏ô‡πÑ‡∏î‡πâ (‡∏õ‡∏£‡∏±‡∏ö path ‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏á‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡πá‡∏Å‡∏ï‡πå)
    // window.location.href = `/crm/create-quotation?id=${q.id}`;
  };

  const downloadFile = () => {
    const a = document.createElement("a");
    a.href = selectedPdfUrl;
    a.download = selectedFileName;
    a.click();
    URL.revokeObjectURL(selectedPdfUrl);
    setSelectedPdfUrl("");
  };

  const closeDialog = () => {
    dialogRef.current?.close();
    setSelectedPdfUrl("");
  };

  return (
    <div className="report-root">
      <h2>üìë ‡πÉ‡∏ö‡πÄ‡∏™‡∏ô‡∏≠‡∏£‡∏≤‡∏Ñ‡∏≤</h2>
      {quotations.length === 0 ? (
        <p>‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•</p>
      ) : (
        <ul className="report-list">
          {quotations.map((q) => (
            <li key={q.id} className="report-card income">
              <div className="card-header">
                <p>üìÖ <b>{format(new Date(q.created_at), "yyyy-MM-dd")}</b></p>
              </div>
              <p>‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà: {q.number || "-"}</p>
              <p>üë§ ‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤: {q.customers?.name || "-"}</p>
              <p>üßæ ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£: {q.items?.length || 0} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£</p>
              <p className="amount-income">üíµ {Number(q.total).toLocaleString()} ‡∏ö‡∏≤‡∏ó</p>
              <p>üìù ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏: {q.note || "-"}</p>

              <div style={{ display: "flex", gap: 8, marginTop: 8 }}>
                <button className="btn-view" onClick={() => handleDownloadPDF(q)}>
                  üßæ ‡∏î‡∏π PDF
                </button>
                <button className="btn-view" style={{ background:'#d9534f' }} onClick={() => handleEdit(q)}>
                  ‚úèÔ∏è ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç
                </button>
              </div>
            </li>
          ))}
        </ul>
      )}

      {/* ‚úÖ Popup Modal HTML5 */}
      <dialog ref={dialogRef} style={{ width: "90%", height: "90%" }}>
        <div style={{ display: "flex", justifyContent: "space-between", marginBottom: "0.5rem" }}>
          <button className="btn-view" onClick={closeDialog}>‚ùå ‡∏õ‡∏¥‡∏î</button>
          <button className="btn-view" onClick={downloadFile}>‚¨áÔ∏è ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î</button>
        </div>
        {selectedPdfUrl && (
          <iframe
            src={selectedPdfUrl}
            width="100%"
            height="90%"
            style={{ border: "1px solid #ccc" }}
            title="‡πÉ‡∏ö‡πÄ‡∏™‡∏ô‡∏≠‡∏£‡∏≤‡∏Ñ‡∏≤"
          />
        )}
      </dialog>
    </div>
  );
}
