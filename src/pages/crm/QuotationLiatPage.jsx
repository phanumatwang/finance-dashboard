import { useEffect, useRef, useState } from "react";
import { supabase } from "../../supabase/supabaseClient";
import { format } from "date-fns";
import { generateQuotationPDF } from "../../generateQuotationPDF";
import { displayLatestNumber } from "../../utils/quotationNumber";
import CreateQuotationPage from "./CreateQuotationPage"; // ‚¨ÖÔ∏è ‡∏ü‡∏≠‡∏£‡πå‡∏°‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏ù‡∏±‡∏á‡πÉ‡∏ô‡πÇ‡∏°‡∏î‡∏±‡∏•

export default function ListQuotationPage() {
  const [quotations, setQuotations] = useState([]);
  const [selectedPdfUrl, setSelectedPdfUrl] = useState("");
  const [selectedFileName, setSelectedFileName] = useState("");

  // ‡πÇ‡∏°‡∏î‡∏±‡∏• 2 ‡∏ï‡∏±‡∏ß: PDF + Editor
  const pdfDialogRef = useRef();
  const editorDialogRef = useRef();

  // ‡∏ö‡∏¥‡∏•‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡πÄ‡∏•‡∏∑‡∏≠‡∏Å ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏™‡πà‡∏á‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏õ‡∏û‡∏£‡∏µ‡∏ü‡∏¥‡∏•‡πÉ‡∏ô‡∏ü‡∏≠‡∏£‡πå‡∏°
  const [selectedQuotation, setSelectedQuotation] = useState(null);

  const fetchQuotations = async () => {
    const { data, error } = await supabase
      .from("quotations")
      .select("*, customers(name, address, tel)")
      .order("created_at", { ascending: false });
    if (!error) setQuotations(data || []);
  };

  useEffect(() => {
    fetchQuotations();
  }, []);

  const handleDownloadPDF = async (e, quotation) => {
    e.stopPropagation();
    const customer = quotation.customers || {};
    const { url } = await generateQuotationPDF(quotation, customer, "/logo.jpg");
    setSelectedPdfUrl(url);
    setSelectedFileName(`‡πÉ‡∏ö‡πÄ‡∏™‡∏ô‡∏≠‡∏£‡∏≤‡∏Ñ‡∏≤-${customer.name || "‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤"}.pdf`);
    pdfDialogRef.current?.showModal();
  };

  // ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ (‡πÑ‡∏°‡πà‡πÅ‡∏ï‡∏∞ number)
  const updateStatus = async (e, q, status) => {
    e.stopPropagation();
    const { error } = await supabase
      .from("quotations")
      // ‚ùó ‡∏ñ‡πâ‡∏≤ DB ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ updated_at ‡πÉ‡∏´‡πâ‡∏•‡∏ö‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡∏ô‡∏±‡πâ‡∏ô‡∏ó‡∏¥‡πâ‡∏á
      .update({ status /*, updated_at: new Date().toISOString()*/ })
      .eq("id", q.id);
    if (error) return alert("‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: " + error.message);
    fetchQuotations();
  };

  const downloadFile = () => {
    const a = document.createElement("a");
    a.href = selectedPdfUrl;
    a.download = selectedFileName;
    a.click();
    URL.revokeObjectURL(selectedPdfUrl);
    setSelectedPdfUrl("");
  };

  const closePdfDialog = () => {
    pdfDialogRef.current?.close();
    setSelectedPdfUrl("");
  };

  // ‡∏Å‡∏î‡∏Å‡∏≤‡∏£‡πå‡∏î ‚Üí ‡πÄ‡∏õ‡∏¥‡∏î‡πÇ‡∏°‡∏î‡∏±‡∏•‡∏ü‡∏≠‡∏£‡πå‡∏° CreateQuotationPage
  const openEditorModal = (q) => {
    setSelectedQuotation(q);
    editorDialogRef.current?.showModal();
  };

  const closeEditorModal = () => {
    editorDialogRef.current?.close();
    setSelectedQuotation(null);
    fetchQuotations(); // ‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä list ‡∏´‡∏•‡∏±‡∏á‡∏õ‡∏¥‡∏î (‡πÄ‡∏ä‡πà‡∏ô ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏™‡∏£‡πá‡∏à)
  };

  return (
    <div className="report-root">
      <h2>üìë ‡πÉ‡∏ö‡πÄ‡∏™‡∏ô‡∏≠‡∏£‡∏≤‡∏Ñ‡∏≤</h2>
      {quotations.length === 0 ? (
        <p>‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•</p>
      ) : (
        <ul className="report-list">
          {quotations.map((q) => (
            <li
              key={q.id}
              className="report-card income"
              onClick={() => openEditorModal(q)}
              role="button"
              tabIndex={0}
              style={{ cursor: "pointer" }}
              onKeyDown={(e) => (e.key === "Enter" || e.key === " ") && openEditorModal(q)}
            >
              <div
                className="card-header"
                style={{ display: "flex", justifyContent: "space-between", alignItems: "center" }}
              >
                <p>üìÖ <b>{format(new Date(q.created_at), "yyyy-MM-dd")}</b></p>
                <span
                  className="status-badge"
                  style={{
                    padding: "2px 8px",
                    borderRadius: 12,
                    fontSize: 12,
                    color: "#fff",
                    background:
                      q.status === "approved" ? "#07881f" :
                      q.status === "rejected" ? "#dc2626" : "#6b7280",
                  }}
                >
                  {q.status || "draft"}
                </span>
              </div>

              <p>‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà: {displayLatestNumber(q.number) || "-"}</p>
              <p>üë§ ‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤: {q.customers?.name || "-"}</p>
              <p>üßæ ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£: {q.items?.length || 0} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£</p>
              <p className="amount-income">üíµ {Number(q.total || 0).toLocaleString()} ‡∏ö‡∏≤‡∏ó</p>
              <p>üìù ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏: {q.note || "-"}</p>

              <div style={{ display: "flex", gap: 8, marginTop: 8 }}>
                <button className="btn-view" onClick={(e) => handleDownloadPDF(e, q)}>
                  üßæ ‡∏î‡∏π PDF
                </button>

                {/* ‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥ / ‡πÑ‡∏°‡πà‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥ - ‡πÑ‡∏°‡πà‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏•‡∏Ç */}
                <button
                  className="btn-view"
                  style={{ background: "#16a34a" }}
                  onClick={(e) => updateStatus(e, q, "approved")}
                >
                  ‚úÖ ‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥
                </button>
                <button
                  className="btn-view"
                  style={{ background: "#dc2626" }}
                  onClick={(e) => updateStatus(e, q, "rejected")}
                >
                  ‚ùå ‡πÑ‡∏°‡πà‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥
                </button>
              </div>
            </li>
          ))}
        </ul>
      )}

      {/* Modal: ‡∏î‡∏π PDF */}
      <dialog ref={pdfDialogRef} style={{ width: "90%", height: "90%" }}>
        <div style={{ display: "flex", justifyContent: "space-between", marginBottom: "0.5rem" }}>
          <button className="btn-view" onClick={closePdfDialog}>‚ùå ‡∏õ‡∏¥‡∏î</button>
          <button className="btn-view" onClick={downloadFile}>‚¨áÔ∏è ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î</button>
        </div>
        {selectedPdfUrl && (
          <iframe
            src={selectedPdfUrl}
            width="100%"
            height="90%"
            style={{ border: "1px solid #ccc" }}
            title="‡πÉ‡∏ö‡πÄ‡∏™‡∏ô‡∏≠‡∏£‡∏≤‡∏Ñ‡∏≤"
          />
        )}
      </dialog>

      {/* Modal: ‡∏ü‡∏≠‡∏£‡πå‡∏° Create/Edit (‡∏ù‡∏±‡∏á‡∏´‡∏ô‡πâ‡∏≤ /quot/add) */}
      <dialog ref={editorDialogRef} style={{ width: "95%", height: "95%", padding: 0 }}>
        <div style={{ display: "flex", justifyContent: "space-between", padding: 8, borderBottom: "1px solid #e5e7eb" }}>
          <div style={{ fontWeight: 600 }}>üßæ ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç/‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏ö‡πÄ‡∏™‡∏ô‡∏≠‡∏£‡∏≤‡∏Ñ‡∏≤</div>
          <button className="btn-view" onClick={closeEditorModal}>‚ùå ‡∏õ‡∏¥‡∏î</button>
        </div>
        <div style={{ height: "calc(100% - 44px)", overflow: "auto", padding: 12 }}>
          <CreateQuotationPage
            key={selectedQuotation?.id || "new"}   // ‚úÖ force re-mount ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Å‡∏≤‡∏£‡πå‡∏î‡πÉ‡∏´‡∏°‡πà
            quotationData={selectedQuotation} 
                 // ‚úÖ ‡∏™‡πà‡∏á props ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏û‡∏£‡∏µ‡∏ü‡∏¥‡∏•
            onClose={closeEditorModal}             // ‚úÖ ‡πÉ‡∏´‡πâ‡∏ü‡∏≠‡∏£‡πå‡∏°‡∏õ‡∏¥‡∏î modal ‡πÑ‡∏î‡πâ‡πÄ‡∏≠‡∏á‡∏´‡∏•‡∏±‡∏á‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å
          />
        </div>
      </dialog>
    </div>
  );
}
